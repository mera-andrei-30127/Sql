/*

----------------------------------------------This comand create the database.
*/
create database invatamant_universitar
go
use invatamant_universitar
go

/*
-----------------------------------------------Here we create all the tables.

*/
create table grupe(
   id_gr int IDENTITY(1,1) primary key,
   nr_grupa int NULL
   )
go
create table studenti(
   	id_s int IDENTITY(1,1) primary key,
	id_gr int foreign key references grupe(id_gr),
	nume varchar(20) NULL,
	prenume varchar(20) NULL,
	CNP float unique,
	Adresa varchar(100) NULL,
	Medie float NULL,
	Credite int NULL,
	An int NULL
	)

go
create table discipline(
 id_d  int IDENTITY(1,1) primary key,
 nume_d varchar(30) NULL,
 credite int NULL
 )
go
 create table profesori(
 id_prof int IDENTITY(1,1) primary key,
 id_d int foreign key references discipline(id_d),
 nume_prof varchar(20) NULL,
 prenume_prof varchar(20) NULL
 )
go
 create table examene (
 id_ex int IDENTITY(1,1) primary key ,
 id_d  int foreign key references discipline(id_d),
 id_prof int foreign key references profesori(id_prof),
 id_s int foreign key references studenti(id_s),
 tip varchar(50) NULL
)
go
create table note(
 id_n int IDENTITY(1,1) primary key,
 nota int NULL,
 id_ex int foreign key references examene(id_ex)
 )
go

/*

----------------------------------------------------Here we insert data in all the tables.

*/

 SET IDENTITY_INSERT grupe ON
 INSERT grupe(id_gr,nr_grupa) VALUES(1,7)
 INSERT grupe(id_gr,nr_grupa) VALUES(2,7)
 INSERT grupe(id_gr,nr_grupa) VALUES(3,7)
 INSERT grupe(id_gr,nr_grupa) VALUES(4,3)
 INSERT grupe(id_gr,nr_grupa) VALUES(5,3)
 INSERT grupe(id_gr,nr_grupa) VALUES(6,4)
 INSERT grupe(id_gr,nr_grupa) VALUES(7,4)
 INSERT grupe(id_gr,nr_grupa) VALUES(8,2)
 INSERT grupe(id_gr,nr_grupa) VALUES(9,1)
 INSERT grupe(id_gr,nr_grupa) VALUES(10,6)
SET IDENTITY_INSERT grupe OFF
go
 SET IDENTITY_INSERT studenti ON
INSERT studenti (id_s,id_gr,nume,prenume,CNP,Adresa,Medie,Credite,An ) VALUES (1,3,'Mocean', 'Giorgiana', 2990511234568,'jud.Cluj,Str.Observatorului,nr.56',7.80,10,2)
INSERT studenti (id_s,id_gr,nume,prenume,CNP,Adresa,Medie,Credite,An) VALUES (2,9 ,'Vasile','Andrei', 2990909134259,'jud.Cluj,srt.Timisului,blocT3,scara 2.ap2',7.90,30,3)
INSERT studenti  (id_s,id_gr,nume,prenume,CNP,Adresa,Medie,Credite,An) VALUES (3,4, 'Pop','Ana',2960604325634,'jud.Hunedoara,str.Avram Iancu,nr123',6.78,60,3)
INSERT studenti  (id_s,id_gr,nume,prenume,CNP,Adresa,Medie,Credite,An) VALUES (4,5,'Marinescu','Alina',2970921098542,'jud.Bihor,str.Teilor,nr.45',8.54,60,4)
INSERT studenti  (id_s,id_gr,nume,prenume,CNP,Adresa,Medie,Credite,An) VALUES (5,7,'Fechete','Vlad',2981204984231,'jud.Cluj,str.Caisului,nr.15',8.23,40,2)
INSERT studenti  (id_s,id_gr,nume,prenume,CNP,Adresa,Medie,Credite,An) VALUES (6,8,'Rus','Marian',2960321342598,'jud.Iasi,str.Unirii,nr.90',7.22,50,3)
INSERT studenti  (id_s,id_gr,nume,prenume,CNP,Adresa,Medie,Credite,An) VALUES (7,1 ,'Muresan','Rares',2991103765391,'jud.Cluj,str.Ciresilor,nr.10',7.95,20,3)
INSERT studenti  (id_s,id_gr,nume,prenume,CNP,Adresa,Medie,Credite,An) VALUES (8, 2,'Vladimirescu','Andra',2930505092581,'jud.Maramures,str.Clujului,nr.43',6.57,25,2)
INSERT studenti  (id_s,id_gr,nume,prenume,CNP,Adresa,Medie,Credite,An) VALUES (9, 6,'Suciu','Denisa',2940906875342,'Jud.Bistrita,str.Stejarului,nr.10',8.98,60,4)
SET IDENTITY_INSERT studenti OFF
go


 SET IDENTITY_INSERT discipline ON
 INSERT discipline(id_d,nume_d,credite) VALUES(1,'Analiza Matematica ',5)
 INSERT discipline(id_d,nume_d,credite) VALUES(2,'Bazele cirucitelor electronice',5)
 INSERT discipline(id_d,nume_d,credite) VALUES(3,'Engleza',3)
 INSERT discipline(id_d,nume_d,credite) VALUES(4,'Sport',2)
 INSERT discipline(id_d,nume_d,credite) VALUES(5,'Electrotehnica',5)
 INSERT discipline(id_d,nume_d,credite) VALUES(6,'Baza de date',4)
 INSERT discipline(id_d,nume_d,credite) VALUES(7,'Programarea calculatoarelor',5)
 INSERT discipline(id_d,nume_d,credite) VALUES(8,'ASDN',5)
 INSERT discipline(id_d,nume_d,credite) VALUES(9,'Electronica digitala',5)
 INSERT discipline(id_d,nume_d,credite) VALUES(10,'Calcul numeric',4)
 SET IDENTITY_INSERT discipline OFF
go
 SET IDENTITY_INSERT profesori ON
 INSERT profesori(id_prof,id_d,nume_prof,prenume_prof) VALUES(1,1,'Inoan','Daniela')
 INSERT profesori(id_prof,id_d,nume_prof,prenume_prof) VALUES(2,2,'Grama','Alin')
 INSERT profesori(id_prof,id_d,nume_prof,prenume_prof) VALUES(3,3,'Pop','Maria')
 INSERT profesori(id_prof,id_d,nume_prof,prenume_prof) VALUES(4,4,'Ionica','Ion')
 INSERT profesori(id_prof,id_d,nume_prof,prenume_prof) VALUES(5,5,'Rus','Claudia')
 INSERT profesori(id_prof,id_d,nume_prof,prenume_prof) VALUES(6,6,'Mitrea','Alexandrina')
 INSERT profesori(id_prof,id_d,nume_prof,prenume_prof) VALUES(7,7,'Costin','Iulia')
 INSERT profesori(id_prof,id_d,nume_prof,prenume_prof) VALUES(8,8,'Cret','Octavian')
 INSERT profesori(id_prof,id_d,nume_prof,prenume_prof) VALUES(9,9,'Nascu','Ioan')
INSERT profesori(id_prof,id_d,nume_prof,prenume_prof) VALUES(10,10,'Gavrea','Bogdan')
 SET IDENTITY_INSERT profesori OFF

 go

SET IDENTITY_INSERT examene ON
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(1,1,1,1,'sesiune')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(2,3,1,1,'sesiune')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(3,2,2,1,'sesiune')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(4,3,3,2,'restanta')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(5,1,4,2,'restanta')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(6,4,6,2,'sesiune')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(7,5,5,3,'sesiune')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(8,6,8,3,'sesiune')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(9,4,9,3,'restanta')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(10,2,10,3,'restanta')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(11,5,1,4,'restanta')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(12,7,1,4,'sesiune')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(13,8,2,4,'sesiune')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(14,9,3,5,'sesiune')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(15,10,5,2,'sesiune')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(16,10,6,6,'restanta')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(17,9,5,6,'restanta')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(18,9,8,6,'restanta 2')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(19,9,9,3,'restanta 3')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(20,8,10,4,'restanta')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(21,8,1,4,'restanta 2')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(22,8,1,9,'restanta 3')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(23,9,2,2,'restanta 2')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(24,3,3,5,'restanta 2')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(25,1,4,3,'restanta 2')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(26,1,6,2,'restanta 2')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(27,7,5,7,'restanta')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(28,7,8,8,'restanta 2')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(29,7,9,9,'restanta 3')
INSERT examene(id_ex,id_d,id_prof,id_s,tip) VALUES(30,7,10,7,'restanta 4')

SET IDENTITY_INSERT examene OFF
go
SET IDENTITY_INSERT note ON
INSERT note(id_n,nota,id_ex) VALUES(1,3,5)
INSERT note(id_n,nota,id_ex) VALUES(2,5,8)
INSERT note(id_n,nota,id_ex) VALUES(3,7,9)
INSERT note(id_n,nota,id_ex) VALUES(4,2,10)
INSERT note(id_n,nota,id_ex) VALUES(5,10,10)
INSERT note(id_n,nota,id_ex) VALUES(6,8,3)
INSERT note(id_n,nota,id_ex) VALUES(7,9,2)
INSERT note(id_n,nota,id_ex) VALUES(8,6,1)
INSERT note(id_n,nota,id_ex) VALUES(9,5,1)
INSERT note(id_n,nota,id_ex) VALUES(10,5,10)
SET IDENTITY_INSERT note OFF
go

/*

----------------------------------------------------Here are print different tables.

*/
select *from studenti
select * from grupe
select * from discipline
select * from profesori
select * from examene
select * from note

go
select t1.nume,t3.nota from studenti t1 inner join examene t2
on t1.id_s=t2.id_s inner join note t3 on t2.id_ex=t3.id_ex where t1.id_s=3
go


create view ved_1 as
select nume,prenume,An
from studenti
where An=2
go
select * from ved_1
go
create view ved_2 as
select distinct t1.nume,t1.prenume
from studenti t1 inner join examene t2 on t1.id_s=t2.id_s
inner join  note t3 on t2.id_ex = t3.id_ex
inner join  discipline t4 on t2.id_d=t4.id_d
where t3.nota>=7
go
select * from ved_2
go

/*

----------------------------------------------------This function returns the group level by marks.

*/
create function f_1(@gr int,@d varchar(50))
returns  varchar(50)
as
begin
declare @rez VARCHAR(50)
declare @x int =(select count (t2.CNP)from grupe t1 inner join studenti t2 on t1.id_gr=t2.id_gr
inner join examene t3 on t2.id_s=t3.id_s
inner join discipline t4 on t3.id_d=t4.id_d
inner join note t5 on t3.id_ex =t5.id_ex
where t1.nr_grupa=@gr and t4.nume_d=@d and t5.nota>=5)
declare @t int =(select count(t2.CNP) from grupe t1 inner join studenti t2 on t1.id_gr=t2.id_gr
where t1.nr_grupa=@gr)
if (@t>0)
begin
 if (@x*2<@t)
 begin
   set @rez= 'grupa slaba'
 end
 else
 begin
  set @rez= 'grupa buna'
end
end
else
begin
 set @rez= 'grupa fara studenti'
end
return @rez
end
go
select dbo.f_1(7,'ASDN')
go


/*

----------------------------------------------------This function returns all the students from a group with a minimum number of credits.

*/
create function f_2(@nr int)
returns table
as
return
(select t1.nume + t1.prenume as 'nume complet',t4.nume_d,t3.nota,t2.tip from
studenti t1 inner join examene t2 on t1.id_s=t2.id_s inner join note t3 on t2.id_ex=t3.id_ex inner join discipline t4 on t2.id_d=t4.id_d
where t1.Credite > @nr)
go
select * from f_2(20)
go


/*

----------------------------------------------------This procedure transfer a student.

*/
create procedure p_1(@ns varchar(50),@np varchar(50),@x int)
 as
 select * from studenti
 if exists(select * from studenti where nume=@ns and prenume=@np and id_s=@x and id_gr=2)
 begin
 print 'studentul exista si este deja transferat'
 end
 else
 if exists(select * from studenti where nume=@ns and prenume=@np and id_s=@x)
 begin
  update studenti
  set id_gr=2
  where nume=@ns and prenume=@np and id_s=@x
  print 'studentul '+@ns+' a fost transferat'
  end
 else
 begin
  insert studenti(id_gr,nume,prenume,CNP,Adresa,Medie,Credite,An)
  values(3,@ns,@np,2123456789754+@x,'jud.Cluj,Str.Observatorului,nr.100',9.09,30,4)
  print 'studentul '+@ns+' a fost inserat'
 end
 select * from studenti
 go
 exec p_1 'Mocean','Silviu',10
 go


/*

----------------------------------------------------This procedure increase all the marks from the selected exam.

*/
create procedure p_2(@n int,@ex int,@nota int)
 as
 declare @not int,@id_s int,@id_ex int
 declare cu_1 cursor for select t1.id_s,t3.nota,t2.id_ex from studenti t1 inner join examene t2
 on t1.id_s=t2.id_s inner join note t3 on t2.id_ex=t3.id_ex
 open cu_1
 fetch next from cu_1 into @id_s,@not,@id_ex
 while @@FETCH_STATUS=0
 begin
	if(@id_s=@n and @not+1<11  and @id_ex=@ex and @not=@nota)
	begin
	update note
	set nota=nota +1
	where  nota +1<11  and id_ex=@id_ex and nota=@not
	print 'nota '+ convert(varchar(5),@not)+ ' a fost marita'
	end
fetch next from cu_1 into @id_s,@not,@id_ex
 end
  fetch next from cu_1 into @id_s,@not,@id_ex
  close cu_1
  deallocate cu_1
go
  exec p_2 2,5,3
  select * from note
go
alter table note add rezultat varchar(50)
go

/*

---------------------------------------This procedure compare all the student marks with 5 and it make a new column with the result (fail/pass).

*/

create procedure p_3
as
declare @a varchar(20)='Admis',@b varchar(20)='Respins',@nota int,@id int
declare d cursor for select id_n,nota from note
open d
fetch next from d into @id,@nota
while @@FETCH_STATUS=0
begin
declare @val int=(select id_n from note where id_n = @id)
if(@nota>4)
begin
 update note set rezultat = @a where id_n=@val
end
else
begin
 update note set rezultat = @b where id_n=@val
end
fetch next from d into @id,@nota
end
fetch next from d into @id,@nota
close d
deallocate d
go
exec p_3
go
select * from note
 go

/*

----------------------------------------------------This trigger insert data.

*/

 create trigger trig_p on note for insert
 as
 declare @nota int,@id_ex int
 select @nota=nota,@id_ex=id_ex
 from inserted
 go
 insert note(nota,id_ex)
 values(5,7)
 select * from note
 /*
 disable trigger trig_p on note
 drop trig_p*/




